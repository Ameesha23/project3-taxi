swirl()
library(swirl)
swirl()
size <- 20
size
probabilities <- dbinom (trails, size, prob)
probabilities <- dbinom (trials, size, prob)
append(dbinom(t, size, prob), probabilities)
dbinom (t, size, prob)
dbinom (t, size, 0.65)
dbinom (trials[1], size, prob)
dbinom (x, size, prob)
prob
prob
prob <- 0.65
prob
size
probabilities <- c()
probabilities
append(dbinom(t, size, prob), probabilities)
probabilities <- dbinom(trails, size, prob)
probabilities <- dbinom(trials, size, prob)
trials
trials <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
trails
trials
probabilities <- dbinom(trials, size, prob)
probabilities
dbinom(0, size, prob)
successes <- factor (trials[1:21])
successes
barplot(probabilities, "Barplot of Data", "Successes", "Binomial Distribution")
barplot(probabilities, "Barplot of Data", "Successes", "Binomial Distribution", c(0, 20), c(0, 1))
barplot(probabilities)
barplot(probabilities, main = "Successes")
barplot(probabilities, main = "Probabilties", xlab = "successes", ylab = "Binomial Probabilitie")
barplot(probabilities, main = "Probabilties", xlab = "successes", ylab = "Binomial Probabilities", successes)
barplot(probabilities, main = "Probabilties", xlab = "successes", ylab = "Binomial Probabilities")
barplot(probabilities, main = "Probabilties", xlab = "successes", ylab = "Binomial Probabilities", c(0, 20))
barplot(probabilities, main = "Probabilties", xlab = "successes", ylab = "Binomial Probabilities", c(0, 20), c(0, 1))
mean(probabilities)
barplot(probabilities, main = "Probabilties", xlab = "successes", ylab = "Binomial Probabilities")
barplot(probabilities, main = "Probabilties", xlab = "successes", ylab = "Binomial Probabilities", xlim = c(0, 20))
sd(probabilities)
y <- dnorm (x, mean = 0, sd = 1)
x <- (-3, 3, by = 0.1)
x
x <- seq(-3, 3, by = 0.1)
x
y <- dnorm(x, mean = 0, sd = 1)
y
plot(x, y, main = "Standard Normal Density Function", xlab = "Standard Normal Variable", ylab = "Density")
plot(x, y, l,  main = "Standard Normal Density Function", xlab = "Standard Normal Variable", ylab = "Density")
plot(x, y, type = "l", main = "Standard Normal Density Function", xlab = "Standard Normal Variable", ylab = "Density")
plot(x, y, type = "l", main = "Standard Normal Density Function", xlab = "Standard Normal Variable", ylab = "Density", col = "red")
y <- pnorm(x)
y
plot(x, y, type = "l", main = "Standard Normal CDF Function", xlab = "Standard Normal Variable", ylab = "Probability", col = "blue")
abline(0.05, 0, lty = "2", col = "green")
abline(a = 0.05, b = 0, lty = "2", col = "green")
abline(a = "0.05" , b = "0" , lty = "2", col = "green")
source('~/.active-rstudio-document', echo=TRUE)
abline(h = "0.05", lty = "2", col = "green")
abline(h = "0.05", lty = 2, col = "green")
plot(x, y, type = "l", main = "Standard Normal CDF Function", xlab = "Standard Normal Variable", ylab = "Probability", col = "blue")
abline(h = "0.05", lty = 2, col = "green")
abline(h = "0.25", lty = 2, col = "green")
abline(h = "0.50", lty = 2, col = "green")
abline(h = "0.75", lty = 2, col = "green")
abline(h = "0.95", lty = 2, col = "green")
quant <- quantile(x, y)
quant
quantile(y, c(0.05, 0.25, 0.50, 0.75, 0.95))
quant <- quantile(y, c(0.05, 0.25, 0.50, 0.75, 0.95))
quant
abline(v = i, lty = 1, col = "red")
quant[0]
quant[1]
abline(v = quant[1], lty = 1, color = "red")
abline(v = quant[1], lty = 1, col = "red")
abline(v = quant[2], lty = 1, col = "red")
abline(v = quant[3], lty = 1, col = "red")
abline(v = quant[4], lty = 1, col = "red")
abline(v = quant[5], lty = 1, col = "red")
data <- c(56, 61, 62, 63, 64, 66, 66, 68, 68, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 82, 83, 84, 84, 88, 108)
data
hist(data, breaks = seq(50, 110, by = 10), right = FALSE, main = "Histogram: Bins size 10")
hist(data, breaks = seq(50, 110, by = 5), right = FALSE, main = "Histogram: Bins size 5")
boxplot(data, horizontal = TRUE)
boxplot(data, horizontal = TRUE, main = "Boxplot")
boxplot(data, horizontal = TRUE, main = "Boxplot", ylim = c(50, 110))
mean(data)
variance(data)
var(data)
sd(data)
R.version.string
library(colorblindr)
install.packages(colorblindr)
remotes::install_github("wilkelab/cowplot")
install.packages("colorspace", repos = "http://R-Forge.R-project.org")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = <DATA>) +
<GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))
ggplot(data = mpg)
?mtcars
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = hwy, y = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = class, y = drv))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class))
installed.packages("igraph")
installed.packages("igraph")
shiny::runApp('Desktop/CS 424/Project2-CTAMap')
date = as_date("2021-01-01")
date
date <- as_date("2021-01-01")
print(date)
ibrary(shiny)
library(ggplot2)
library(shinydashboard)
library(lubridate)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
library(dplyr)
library(plyr)
library(readr)
library(leaflet)
library(leaflet.providers)
marker_radius <- function(num_rides) {
library(shiny)
library(ggplot2)
library(shinydashboard)
library(lubridate)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
library(dplyr)
library(plyr)
library(readr)
library(leaflet)
library(leaflet.providers)
marker_radius <- function(num_rides) {
radius = 0
if (num_rides < 1000.0){
radius = 4
}
else if (num_rides < 2000.0){
radius = 6
}
else if (num_rides < 2500.0){
radius = 8
}
else if(num_rides < 4000.0){
radius = 10
}
else{
radius = 12
}
return (radius)
}
date <- as_date("2021-01-01")
print(date)
date
dateNew <- as_date("2021-01-01")
date
dateNew <- as_date("01-01-2021")
date
dateNew <- dmy("14/10/1979")
date
dateNew <-ymd("20110604")
date
month(date)
library(lubridate)
print(temp)
temp = temp[-148] #delete the last file to be read separately
#read in the files
ridership_data = ldply(temp, read_csv)
dateNew <-ymd("20110604")
date
getwd()
R --version()
version()
R.version()
library(ggmap)
install.packages("ggmap")
library(ggmap)
library(ggplot2)
library(ggmap)
library(maps)
library(mapdata)
library(ggthemes)
library(sp)
library(stringr)
library(plyr)
install.packages("maps", "mapdata", "ggthemes")
shiny::runApp('Desktop/CS_424/project3-taxi')
setwd("/Users/ameesha/Desktop/CS_424/project3-taxi")
library(shiny)
library(ggplot2)
library(shinydashboard)
library(lubridate)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
library(dplyr)
library(plyr)
library(readr)
library(leaflet)
library(leaflet.providers)
library(viridis)
#get the file names with data
files = list.files(pattern="*.csv", full.name = T)
#read in the data
taxi_info = ldply(files, read_csv)
#fix dates using lubridate
taxi_info$TripDate = as_date(taxi_info$Trip_Date)
#add day, month and year data to csv
taxi_info$year = year(taxi_info$TripDate)
taxi_info$month = month(taxi_info$TripDate, abbr = TRUE, label = TRUE)
taxi_info$wday = wday(taxi_info$TripDate, label=TRUE)
print(head(taxi_info))
m <- ggplot(taxi_info, aes(x="Trip_Miles")) +
geom_bar(stat="bin", width=0.7, fill="#33647A") +
scale_y_continuous(labels = scales::comma) +
theme_bw()
m
print(str(taxi_info))
m <- ggplot(taxi_info, aes(x="Trip_Miles")) +
geom_histogram(stat="bin", width=0.7, fill="#33647A") +
scale_y_continuous(labels = scales::comma) +
theme_bw()
m
m <- ggplot(taxi_info, aes(x="Trip_Miles")) +
geom_histogram(stat="count", width=0.7, fill="#33647A") +
scale_y_continuous(labels = scales::comma) +
theme_bw()
m
g <- qplot(taxi_info$Trip_Miles,
geom="histogram",
binwidth=5)
g
m <- ggplot(taxi_info, aes(x=Trip_Miles)) +
geom_histogram(stat="count", width=0.7, fill="#33647A") +
scale_y_continuous(labels = scales::comma) +
theme_bw()
m
m <- ggplot(taxi_info, aes(x=Trip_Miles)) +
geom_histogram(stat="bin", width=0.7, fill="#33647A") +
scale_y_continuous(labels = scales::comma) +
theme_bw()
m
m <- ggplot(taxi_info, aes(x=Trip_Miles)) +
geom_bar(stat="bin", width=0.7, fill="#33647A") +
scale_y_continuous(labels = scales::comma) +
theme_bw()
m
m <- ggplot(taxi_info, aes(x=Trip_Miles)) +
geom_bar(stat="bin", width=0.7, fill="#33647A") +
scale_y_continuous(labels = scales::comma) +
theme_bw()
m
m <- ggplot(taxi_info, aes(x=Trip_Miles)) +
geom_bar(stat="bin", fill="#33647A") +
scale_y_continuous(labels = scales::comma) +
theme_bw()
m
m <- ggplot(taxi_info, aes(x=Trip_Miles)) +
geom_bar(stat="bin", bin_width = 10, fill="#33647A") +
scale_y_continuous(labels = scales::comma) +
theme_bw()
m <- ggplot(taxi_info, aes(x=Trip_Miles)) +
geom_bar(stat="bin", binwidth = 10, fill="#33647A") +
scale_y_continuous(labels = scales::comma) +
theme_bw()
m
m <- ggplot(taxi_info, aes(x=Trip_Miles)) +
geom_bar(stat="bin", binwidth = 20, fill="#33647A") +
scale_y_continuous(labels = scales::comma) +
theme_bw()
m
print(min(taxi_info$Trip_Miles))
print(max(taxi_info$Trip_Miles))
m <- ggplot(taxi_info, aes(x=Trip_Miles)) +
geom_bar(stat="bin", binwidth = 5, fill="#33647A") +
scale_y_continuous(labels = scales::comma) +
theme_bw()
m
m <- ggplot(taxi_info, aes(x=Trip_Miles*2)) +
geom_bar(stat="bin", binwidth = 5, fill="#33647A") +
scale_y_continuous(labels = scales::comma) +
theme_bw()
m
m <- ggplot(taxi_info, aes(x=Trip_Miles)) +
geom_bar(stat="bin", binwidth = 5, fill="#33647A") +
scale_y_continuous(labels = scales::comma) +
theme_bw()
m <- ggplot(taxi_info, aes(x=Trip_Miles)) +
geom_bar(stat="bin", binwidth = 5, fill="#33647A", width = 0.7) +
scale_y_continuous(labels = scales::comma) +
theme_bw()
m
m <- ggplot(taxi_info, aes(x=Trip_Time)) +
geom_bar(stat="bin", binwidth = 5, fill="#33647A", width = 0.7) +
scale_y_continuous(labels = scales::comma) +
theme_bw()
m
m <- ggplot(taxi_info, aes(x=Trip_Time)) +
geom_bar(stat="bin", binwidth = 5, fill="#33647A") +
scale_y_continuous(labels = scales::comma) +
theme_bw()
m
runApp()
runApp()
df_new<- count(TripDate)
library(shiny)
library(ggplot2)
library(shinydashboard)
library(lubridate)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
library(dplyr)
library(plyr)
library(readr)
library(leaflet)
library(leaflet.providers)
library(viridis)
#get the file names with data
files = list.files(pattern="*.csv", full.name = T)
#read in the data
taxi_info = ldply(files, read_csv)
#print(head(taxi_info))
#print(nrow(taxi_info))
#fix dates using lubridate
taxi_info$TripDate = as_date(taxi_info$Trip_Date)
#add day, month and year data to csv
taxi_info$year = year(taxi_info$TripDate)
taxi_info$month = month(taxi_info$TripDate, abbr = TRUE, label = TRUE)
taxi_info$wday = wday(taxi_info$TripDate, label=TRUE)
print(head(taxi_info))
print(str(taxi_info))
print(min(taxi_info$TripDate))
print(max(taxi_info$TripDate))
print(min(taxi_info$Trip_Miles))
print(max(taxi_info$Trip_Miles))
DateSub <- setNames(aggregate(taxi_info, by=list(taxi_info$Trip_Time), FUN=sum), c("date", "rides"))
print(head(DateSub))
df_new<- count(TripDate)
print(head(taxi_info))
#fix dates using lubridate
taxi_info$TripDate = as_date(taxi_info$Trip_Date)
print(head(taxi_info))
df_new<- count(TripDate)
df_new<- count(taxi_info$TripDate)
df_new
df_new<- setNames(count(taxi_info$TripDate), c("Date", "Rides"))
df_new
head(df_new)
print(head(taxi_info))
runApp()
m <- ggplot(taxi_info, aes(x=Trip_Seconds)) +
geom_bar(stat="bin", binwidth = 5, fill="#33647A") +
scale_y_continuous(labels = scales::comma) +
labs(x = "Total trip time", y ="Rides") +
theme_bw() +
theme(text = element_text(family = "sans", face = "bold")) +
theme(plot.title = element_text(hjust = 0.5, size=20), axis.title=element_text(size=12))
m
m <- ggplot(taxi_info, aes(x=Trip_Seconds)) +
geom_bar(stat="bin", binwidth = 100, fill="#33647A") +
scale_y_continuous(labels = scales::comma) +
labs(x = "Total trip time", y ="Rides") +
theme_bw() +
theme(text = element_text(family = "sans", face = "bold")) +
theme(plot.title = element_text(hjust = 0.5, size=20), axis.title=element_text(size=12))
m
m <- ggplot(taxi_info, aes(x=Trip_Seconds)) +
geom_bar(stat="bin", binwidth = 500, fill="#33647A") +
scale_y_continuous(labels = scales::comma) +
labs(x = "Total trip time", y ="Rides") +
theme_bw() +
theme(text = element_text(family = "sans", face = "bold")) +
theme(plot.title = element_text(hjust = 0.5, size=20), axis.title=element_text(size=12))
m
print(max(taxi_info$Trip_Seconds))
print(min(taxi_info$Trip_Seconds))
setwd("/Users/ameesha/Desktop/CS_424/project3-taxi")
getwd()
library(shiny)
library(ggplot2)
library(shinydashboard)
library(lubridate)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
library(dplyr)
library(plyr)
library(readr)
library(leaflet)
library(leaflet.providers)
library(viridis)
#get the file names with data
files = list.files(pattern="*.csv", full.name = T)
#read in the data
taxi_info = ldply(files, read_csv)
#fix dates using lubridate
taxi_info$TripDate = as_date(taxi_info$Trip_Date)
#add day, month and year data to csv
taxi_info$year = year(taxi_info$TripDate)
taxi_info$month = month(taxi_info$TripDate, abbr = TRUE, label = TRUE)
taxi_info$wday = wday(taxi_info$TripDate, label=TRUE)
print(head(taxi_info))
#get the file names with data
files = list.files(pattern="*.csv", full.name = T)
#read in the data
taxi_info = ldply(files, read_csv)
#fix dates using lubridate
taxi_info$TripDate = as_date(taxi_info$Trip_Date)
#add day, month and year data to csv
taxi_info$year = year(taxi_info$TripDate)
taxi_info$month = month(taxi_info$TripDate, abbr = TRUE, label = TRUE)
taxi_info$wday = wday(taxi_info$TripDate, label=TRUE)
print(head(taxi_info))
library(mapdata)
install.packages("mapdata")
usa <- map_data("county")
usa
il <- subset(usa, region == "illinois")
il
library(sf)
chi_map <- read_sf("https://raw.githubusercontent.com/thisisdaryn/data/master/geo/chicago/Comm_Areas.geojson")
chi_map
m <- ggplot(data = chi_map) + geom_sf()
m
m <- ggplot(data = chi_map) +
geom_sf() +
geom_sf_text(aes(label = area_num_1))
m
m <- ggplot(data = chi_map) +
geom_sf() +
geom_sf_text(aes(label = area_num_1))+
theme_bw()
m
chi_taxi_map <- left_join(chi_map, taxi_info, by = c("area_num_1", "Pickup_Community_Area"))
chi_taxi_map <- left_join(chi_map, taxi_info, by = c("area_num_1"= "Pickup_Community_Area"))
chi_taxi_map
chi_map
chi_map$area_num_1 = as.numeric(chi_map$area_num_1)
str(chi_map)
chi_taxi_map <- left_join(chi_map, taxi_info, by = c("area_num_1"= "Pickup_Community_Area"))
chi_taxi_map
chi_taxi_map <- left_join(chi_map, taxi_info, by = c("area_num_1"= "Pickup_Community_Area"))
pickups_comm <- setNames(count(taxi_info$Pickup_Community_Area), c("Pickup_Community_Area", "Rides"))
pickups_comm
chi_taxi_map <- left_join(chi_map, pickups_comm, by = ("area_num_1"))
pickups_comm <- setNames(count(taxi_info$Pickup_Community_Area), c("area_num_1", "Rides"))
chi_taxi_map <- left_join(chi_map, pickups_comm, by = ("area_num_1"))
chi_taxi_map
m <- ggplot(data = chi_taxi_map, aes(fill = Rides)) +
geom_sf() +
geom_sf_text(aes(label = area_num_1))+
theme_bw()+
ggtitle("Number of rides in areas")
m
m <- ggplot(data = chi_taxi_map, aes(fill = log(Rides))) +
geom_sf() +
geom_sf_text(aes(label = area_num_1))+
theme_bw()+
ggtitle("Number of rides in areas")
m
print(min(pickups_comm$area_num_1))
print(max(pickups_comm$area_num_1))
areas <- c(1:77)
community_menu <- left_join(chi_map, areas, by = ("area_num_1"))
chi_taxi_map
chi_map
community_menu <- chi_map[sub]
sub <- c("community", "area_num_1")
community_menu <- chi_map[sub]
community_menu
str(community_menu)
sub <- c("community", "area_num_1")
community_menu <- chi_map[sub]
str(community_menu)
community_menu <- chi_map[!"geometry"]
str(community_menu)
runApp()
runApp()
chi_map
head(chi_map)
